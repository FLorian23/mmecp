<?xml version="1.0" encoding="UTF-8"?>

<!-- description of document type -->
<!DOCTYPE rc_schema SYSTEM "rule_converter_schema.dtd">

<rc_schema>

	<head>
		<text>
(ns carneades.engine.streetlife-scheme
  (:use clojure.pprint
        (carneades.engine statement argument argument-graph shell argument theory
         aspic dublin-core argument-evaluation policy ask  argument-generator)
        carneades.maps.lacij)
  (:require [carneades.project.fs :as project]
            [carneades.maps.lacij :refer [export]]
            [carneades.database.db :as db]
            [carneades.database.argument-graph :as ag-db]
            [carneades.database.import :refer [import-from-argument-graph]]
            [midje.sweet :refer :all :exclude [facts]]))
        </text>
	</head>

	
	<body ph_rules="%rules">
		<text>
(def theory1
  (make-theory
    :sections
    [(make-section
      :schemes
      [
%rules
      ]
    )]
  )
)
		</text>
		<rules>
		
			<rule ph_id="%id" ph_probability="%prob" ph_conclusion="%con" ph_premises="%pms">
				<text>
		(make-scheme
		  :id '%id'
          :conclusion %con
          :premises [
%pms
                    ]
        )
				</text>
				<conclusion ph_value="%val" ph_attribut="%att" ph_parent="%par">
					<text>
'(%val %att %par)
					</text>
				</conclusion>
				<premises>

					<!-- categorical premise -->
					<premise type="categorical" ph_probability="%prob" ph_value="%val" ph_attribut="%att" ph_parent="%par">
						<text>
					  (pm '(%val %att %par))
						</text>
					</premise>

					<!-- continous premise -->
					<premise type="continous" ph_probability="%prob" ph_value="%val" ph_attribut="%att" ph_parent="%par" ph_operator="%op" ph_limit="%limit">
						<text>
					  (pm '(%val %att %par))
                      (pm '(eval %att (let [x %limit]
                                        (if (%op %att x) %att x))))
						</text>
					</premise>

				</premises>
			</rule>

		</rules>
	</body>

</rc_schema>