<?xml version="1.0" encoding="UTF-8"?>

<!-- description of document type -->
<!DOCTYPE rc_schema SYSTEM "rule_converter_schema.dtd">

<rc_schema>

	<head>

(ns carneades.engine.streetlife-rules
  (:use clojure.pprint
        carneades.engine.statement
        carneades.engine.theory
        carneades.engine.argument
        carneades.engine.argument-graph
        carneades.engine.argument-generator
        carneades.engine.argument-evaluation
        carneades.engine.aspic
        carneades.engine.shell
        carneades.engine.dublin-core
        carneades.engine.policy
        carneades.engine.ask
        carneades.maps.lacij)
  (:require [carneades.project.fs :as project]
            [carneades.maps.lacij :refer [export]]
            [carneades.database.db :as db]
            [carneades.database.argument-graph :as ag-db]
            [carneades.database.import :refer [import-from-argument-graph]]

            [clojure.pprint :refer :all]
            [midje.sweet :refer :all :exclude [facts]]))

	</head>

	
	<body ph_rules="%rules">

(def forcastModalSplit
  (make-theory
    :header (make-metadata
      :title "Reconstruction of Liverpool Argumentation Schemes"
      :creator "Kevin van Bernum"
      :publisher "Fraunhofer FOKUS"
      :date "2014"
      :description {:en "Forecast of modal split for an event."})
    ;:language L
    :schemes S
    ;:references {""
    ;  (make-metadata
    ;    :creator ""
    ;    :title ""
    ;    :publisher ""
    ;    :date "")}
  )
)

(def S
  [
%rules
  ]
)

		<rules>
			<rule ph_id="%id" ph_conclusion="%con" ph_premises="%pms">

    (make-scheme
	  :id '%id'
      :conclusion %con
      :premises [
%pms
      ]
    )

				<conclusion ph_predicate="%pred" ph_dataIn="%in" ph_result="%res">
'(%pred %in %res)
				</conclusion>
				<premises>

					<!-- categorical premise -->
					<premise type="categorical" ph_value="%val" ph_attribut="%att" ph_parent="%par">
        (pm '(%att %val %par))
					</premise>

					<!-- continuous premise -->
					<premise type="continuous" ph_value="%val" ph_attribut="%att" ph_parent="%par" ph_operator="%op">
		(pm '(%att ?E %par))
        (pm '(eval ?E (let [x ?E]
                           (if (%op ?E x) ?E x))))
					</premise>

				</premises>
			</rule>

		</rules>
	</body>

</rc_schema>