
(ns carneades.engine.streetlife-rules
    (:use clojure.pprint
          carneades.engine.statement
          carneades.engine.theory
          carneades.engine.argument
          carneades.engine.argument-graph
          carneades.engine.argument-generator
          carneades.engine.argument-evaluation
          carneades.engine.aspic
          carneades.engine.shell
          carneades.engine.dublin-core
          carneades.engine.policy
          carneades.engine.ask
          carneades.maps.lacij)
    (:require [carneades.project.fs :as project]
              [carneades.maps.lacij :refer [export]]
              [carneades.database.db :as db]
              [carneades.database.argument-graph :as ag-db]
              [carneades.database.import :refer [import-from-argument-graph]]

              [clojure.pprint :refer :all]
              [midje.sweet :refer :all :exclude [facts]]
    )
)
	
(def forecastModalSplit
    (make-theory
        :header (make-metadata
        :title "Modal Split Forecast"
        :creator "Kevin van Bernum"
        :publisher "Fraunhofer FOKUS"
        :date "2014"
        :description {:en "Forecast of modal split for an event."})
        :schemes S
    )
)

(defn isIn?
    "true if seq contains elm"
    [seq elm]
    (some #(= elm %) seq))

(defn isNotIn?
    "true if seq not contains elm"
    [seq elm]
    (not (some #(= elm %) seq)))

(def S [

    (make-scheme
        :id 'mode
        :conclusion '(has_mode ?E ?P ?M)
        :premises [
            (pm '(visit ?P ?E))
            (pm '(move ?P ?M))
        ]
    )

    
    (make-scheme
        :id 'visit-1
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 42.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (< ?A a) ?A a))))
        ]
    )
            
    (make-scheme
        :id 'visit-2
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 42.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(gender ?G ?P))
            (pm '(eval ?G (if (isIn? '("male") ?G) ?G false)))
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student") ?O) ?O false)))
        ]
    )
            
    (make-scheme
        :id 'visit-3
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 42.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(gender ?G ?P))
            (pm '(eval ?G (if (isIn? '("male") ?G) ?G false)))
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("unemployed") ?O) ?O false)))
        ]
    )
            
    (make-scheme
        :id 'visit-4
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 42.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(gender ?G ?P))
            (pm '(eval ?G (if (isIn? '("female") ?G) ?G false)))
        ]
    )
            
    (make-scheme
        :id 'visit-5
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 42.5] (if (>= ?A a) ?A a))))
        ]
    )
            
    (make-scheme
        :id 'visit-6
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("single") ?M) ?M false)))
            (pm '(starttime ?ST ?E))
            (pm '(eval ?ST (let [t 922.5] (if (< ?ST t) ?ST t))))
        ]
    )
            
    (make-scheme
        :id 'visit-7
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("single") ?M) ?M false)))
            (pm '(starttime ?ST ?E))
            (pm '(eval ?ST (let [t 922.5] (if (>= ?ST t) ?ST t))))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 10.5] (if (< ?MD d) ?MD d))))
        ]
    )
            
    (make-scheme
        :id 'visit-8
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("single") ?M) ?M false)))
            (pm '(starttime ?ST ?E))
            (pm '(eval ?ST (let [t 922.5] (if (>= ?ST t) ?ST t))))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 10.5] (if (>= ?MD d) ?MD d))))
        ]
    )
            
    (make-scheme
        :id 'visit-9
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("divorced" "married") ?M) ?M false)))
        ]
    )
            
    (make-scheme
        :id 'visit-10
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (< ?A a) ?A a))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 17.5] (if (< ?A a) ?A a))))
        ]
    )
            
    (make-scheme
        :id 'visit-11
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("divorced" "single" "widowed") ?M) ?M false)))
        ]
    )
            
    (make-scheme
        :id 'visit-12
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("married") ?M) ?M false)))
            (pm '(type ?T ?E))
            (pm '(eval ?T (if (isIn? '("concert") ?T) ?T false)))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 50.5] (if (< ?A a) ?A a))))
        ]
    )
            
    (make-scheme
        :id 'visit-13
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("married") ?M) ?M false)))
            (pm '(type ?T ?E))
            (pm '(eval ?T (if (isIn? '("concert") ?T) ?T false)))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 50.5] (if (>= ?A a) ?A a))))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 10.5] (if (>= ?MD d) ?MD d))))
        ]
    )
            
    (make-scheme
        :id 'visit-14
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("married") ?M) ?M false)))
            (pm '(type ?T ?E))
            (pm '(eval ?T (if (isIn? '("concert") ?T) ?T false)))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 50.5] (if (>= ?A a) ?A a))))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 10.5] (if (< ?MD d) ?MD d))))
        ]
    )
            
    (make-scheme
        :id 'visit-15
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("employee" "student" "unemployed") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
            (pm '(age ?A ?P))
            (pm '(eval ?A (let [a 40.5] (if (>= ?A a) ?A a))))
            (pm '(marital ?M ?P))
            (pm '(eval ?M (if (isIn? '("married") ?M) ?M false)))
            (pm '(type ?T ?E))
            (pm '(eval ?T (if (isIn? '("sport") ?T) ?T false)))
        ]
    )
            
    (make-scheme
        :id 'visit-16
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("pensioner") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (< ?MD d) ?MD d))))
        ]
    )
            
    (make-scheme
        :id 'visit-17
        :conclusion '(visit ?P ?E)
        :premises [
            (pm '(Event ?E))
            (pm '(Person ?P))
            
            (pm '(occupation ?O ?P))
            (pm '(eval ?O (if (isIn? '("pensioner") ?O) ?O false)))
            (pm '(month ?MD ?E))
            (pm '(eval ?MD (let [d 9] (if (>= ?MD d) ?MD d))))
        ]
    )
            
])
        